// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WatchlistDescription Component should render WatchlistDescription 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <WatchlistDescription>
    <Styled(WithStyles(ForwardRef(Container)))>
      <WithStyles(ForwardRef(Container))
        className="sc-AxirZ fHEVYp"
      >
        <ForwardRef(Container)
          className="sc-AxirZ fHEVYp"
          classes={
            Object {
              "disableGutters": "MuiContainer-disableGutters",
              "fixed": "MuiContainer-fixed",
              "maxWidthLg": "MuiContainer-maxWidthLg",
              "maxWidthMd": "MuiContainer-maxWidthMd",
              "maxWidthSm": "MuiContainer-maxWidthSm",
              "maxWidthXl": "MuiContainer-maxWidthXl",
              "maxWidthXs": "MuiContainer-maxWidthXs",
              "root": "MuiContainer-root",
            }
          }
        >
          <div
            className="MuiContainer-root sc-AxirZ fHEVYp MuiContainer-maxWidthLg"
          >
            <styled.span>
              <span
                className="sc-AxiKw eCALDy"
              >
                Name: 
              </span>
            </styled.span>
            <styled.span>
              <span
                className="sc-AxiKw eCALDy"
              >
                Description: 
              </span>
            </styled.span>
            <Styled(WithStyles(ForwardRef(Button)))
              color="secondary"
              onClick={[Function]}
              startIcon={<UNDEFINED />}
              variant="contained"
            >
              <WithStyles(ForwardRef(Button))
                className="sc-AxjAm jdsAYC"
                color="secondary"
                onClick={[Function]}
                startIcon={<UNDEFINED />}
                variant="contained"
              >
                <ForwardRef(Button)
                  className="sc-AxjAm jdsAYC"
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                      "disableElevation": "MuiButton-disableElevation",
                      "disabled": "Mui-disabled",
                      "endIcon": "MuiButton-endIcon",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "startIcon": "MuiButton-startIcon",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                      "textSizeLarge": "MuiButton-textSizeLarge",
                      "textSizeSmall": "MuiButton-textSizeSmall",
                    }
                  }
                  color="secondary"
                  onClick={[Function]}
                  startIcon={<UNDEFINED />}
                  variant="contained"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-contained sc-AxjAm jdsAYC MuiButton-containedSecondary"
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    onClick={[Function]}
                    type="button"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-contained sc-AxjAm jdsAYC MuiButton-containedSecondary"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      onClick={[Function]}
                      type="button"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-contained sc-AxjAm jdsAYC MuiButton-containedSecondary"
                        disabled={false}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        tabIndex={0}
                        type="button"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          <span
                            className="MuiButton-startIcon MuiButton-iconSizeMedium"
                          >
                            <ForwardRef>
                              <WithStyles(ForwardRef(SvgIcon))>
                                <ForwardRef(SvgIcon)
                                  classes={
                                    Object {
                                      "colorAction": "MuiSvgIcon-colorAction",
                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                      "colorError": "MuiSvgIcon-colorError",
                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                      "root": "MuiSvgIcon-root",
                                    }
                                  }
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="MuiSvgIcon-root"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef>
                          </span>
                          Remove 
                        </span>
                        <WithStyles(memo)
                          center={false}
                        >
                          <ForwardRef(TouchRipple)
                            center={false}
                            classes={
                              Object {
                                "child": "MuiTouchRipple-child",
                                "childLeaving": "MuiTouchRipple-childLeaving",
                                "childPulsate": "MuiTouchRipple-childPulsate",
                                "ripple": "MuiTouchRipple-ripple",
                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                "root": "MuiTouchRipple-root",
                              }
                            }
                          >
                            <span
                              className="MuiTouchRipple-root"
                            >
                              <TransitionGroup
                                childFactory={[Function]}
                                component={null}
                                exit={true}
                              />
                            </span>
                          </ForwardRef(TouchRipple)>
                        </WithStyles(memo)>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </Styled(WithStyles(ForwardRef(Button)))>
          </div>
        </ForwardRef(Container)>
      </WithStyles(ForwardRef(Container))>
    </Styled(WithStyles(ForwardRef(Container)))>
  </WatchlistDescription>
</Provider>
`;
